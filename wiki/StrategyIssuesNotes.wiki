#summary Strategy, Issues and Notes

= Introduction =

This is a collection of related notes to the goal of using Maven and ADF.

= Deploy ADF jars to maven =
      Use [http://code.google.com/p/maven-adf/source/browse/trunk/src/main/java/gov/llnl/JarLoader.java JarLoader]
         Fix ability to use SCP.  Find a FAST way to deploy these! Specifically, handle different user names on each end.
         List missing ones
            adftags.jar

      Could Oracle enhance the JDeveloper ADF installer to install to Maven as a target?

= JAR and POM Naming =
   File name munging (removes spaces and parens) is required as Maven has tighter restrictions.
   Managing duplicate jar usage:  what happens when JDev is using commons-xxx and another component needs commons-yyy?
      How do we know EXACTLY which versions are bundled with JDeveloper?
      Current strategy is to copy all JARs from JDeveloper into repo with a version number matching JDeveloper itself.
      This could now be resolved by using Nexus to search by MD5 and link directly to third party JARs/POMs.


= Runtime Issues =
   Re-address deploying ADF Runtime in the app instead of the container
       Note: this affects what is defined as optional in the Library definitions.
       We do this (deploy in the app) because we have many apps with different lifecycles.

= Building New Projects =
   Describe multi-module layout and how to generate using an arch-type

  IDE Integration
   * Netbeans has native integration to read the pom.xml files directly and use them
   * Use m2eclipse so that Eclipse has native integration to read the pom.xml files directly
   * JDeveloper use 'mvn jdev:jdev' http://myfaces.apache.org/trinidad/plugins/maven-jdev-plugin/project-info.html (The brand new maven2 ingegration for JDeveloper doesn't quite understand multi-module maven projects yet, so still using the trinidad plugin)